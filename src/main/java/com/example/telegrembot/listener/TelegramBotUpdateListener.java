package com.example.telegrembot.listener;

import com.example.telegrembot.entity.NotificationTask;
import com.example.telegrembot.service.NotificationTaskService;
import com.pengrad.telegrambot.TelegramBot;
import com.pengrad.telegrambot.UpdatesListener;
import com.pengrad.telegrambot.model.Message;
import com.pengrad.telegrambot.model.Update;
import com.pengrad.telegrambot.request.SendMessage;
import com.pengrad.telegrambot.response.SendResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.lang.Nullable;
import org.springframework.stereotype.Component;

import javax.annotation.PostConstruct;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.List;
import java.util.Objects;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Component
public class TelegramBotUpdateListener implements UpdatesListener {

    private final Logger logger = LoggerFactory.getLogger(TelegramBotUpdateListener.class);

    private final Pattern pattern = Pattern.compile("(\\d{1,2}\\.\\d{1,2}\\.\\d{4} \\d{1,2}:\\d{2})\\s+([–ê-—è\\d\\s.,!?:]+)");

    private final DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm");
    private final TelegramBot telegramBot;

    private final NotificationTaskService notificationTaskService;

    public TelegramBotUpdateListener(TelegramBot telegramBot, NotificationTaskService notificationTaskService) {
        this.telegramBot = telegramBot;
        this.notificationTaskService = notificationTaskService;
    }

    @PostConstruct
    public void init() {
        telegramBot.setUpdatesListener(this);
    }

    @Override
    public int process(List<Update> list) {
        try {
            list.stream()
                    .filter(update -> update.message() != null)
                    .forEach(update -> {
                        logger.info("Handles update: {}", update);
                        Message message = update.message();
                        Long chatId = message.chat().id();
                        String text = message.text();

                        if ("/start".equals(text)) {
                            sendMessage(chatId, """
                                    üî•üî•üî•–ü—Ä–∏–≤–µ—Çüëã, –º–µ–Ω—è –∑–æ–≤—É—Ç –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫üïí, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å —Ç–≤–æ–∏–º–∏ –¥–µ–ª–∞–º–∏üòÅ, –∞ –∏–º–µ–Ω–Ω–æ —Å —Ç–µ–º —á—Ç–æ–±—ã —Ç—ã –∏—Ö –Ω–µ –∑–∞–±—ã–ª!
                                    –î–ª—è —ç—Ç–æ–≥–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –¥–ª—è –º–µ–Ω—è —Ç–æ—á–Ω—É—é –¥–∞—Ç—É, –≤—Ä–µ–º—è –∏ —Å–æ–±—ã—Ç–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {12.12.2222 22:22 –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µ –î—Ä—É–≥–∞!}
                                    –ê —è –Ω–µ –¥–∞–º —Ç–µ–±–µ –ø—Ä–æ –Ω–µ–≥–æ –∑–∞–±—ã—Ç—åüòâ!üî•üî•üî•
                                    """);
                        } else if (text != null) {
                            Matcher matcher = pattern.matcher(text);
                            if (matcher.find()) {
                                LocalDateTime dateTime = parse(matcher.group(1));
                                if (Objects.isNull(dateTime)) {
                                    sendMessage(chatId, "‚ö†Ô∏è–ù–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏/–∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏!‚ö†Ô∏è");
                                } else {
                                    String text1 = matcher.group(2);
                                    NotificationTask notificationTask = new NotificationTask();
                                    notificationTask.setChatId(chatId);
                                    notificationTask.setMessage(text1);
                                    notificationTask.setNotificationDateTime(dateTime);
                                    notificationTaskService.save(notificationTask);
                                    sendMessage(chatId, "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞!" +
                                            "–Ø –Ω–∞–ø–æ–º–Ω—é —Ç–µ–±–µ, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –µ–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å!");
                                }
                            } else {
                                sendMessage(chatId, "‚ö†Ô∏è–ù–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è!‚ö†Ô∏è");
                            }
                        }
                    });
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
        }
        return UpdatesListener.CONFIRMED_UPDATES_ALL;
    }

    @Nullable
    private LocalDateTime parse(String dateTime) {
        try {
            return LocalDateTime.parse(dateTime, dateTimeFormatter);
        } catch (DateTimeParseException e) {
            return null;
        }
    }

    private void sendMessage(Long chatId, String message) {
        SendMessage sendMessage = new SendMessage(chatId, message);
        SendResponse sendResponse = telegramBot.execute(sendMessage);
        if (!sendResponse.isOk()) {
            logger.error("Error during sending message: {}", sendResponse.description());
        }
    }
}
